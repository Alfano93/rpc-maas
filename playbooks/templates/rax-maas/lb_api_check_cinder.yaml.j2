{% from "templates/common/macros.jinja" import get_metadata with context %}
{% set label = "lb_api_check_cinder" %}
{% set check_name = label %}
{% set cinder_api_url = ansible_local.maas.api.cinderv3_public_url | default(ansible_local.maas.api.cinderv3_internal_url | default(ansible_local.maas.api.cinderv2_public_url | default(ansible_local.maas.api.cinderv2_internal_url | default(ansible_local.maas.api.cinder_public_url | default(ansible_local.maas.api.cinder_internal_url))))) %}
{% set cinder_api_ip = ansible_local.maas.api.cinderv3_public_ip | default(ansible_local.maas.api.cinderv3_internal_ip | default(ansible_local.maas.api.cinderv2_public_ip | default(ansible_local.maas.api.cinderv2_internal_ip | default(ansible_local.maas.api.cinder_public_ip | default(ansible_local.maas.api.cinder_internal_ip))))) %}
{% set cinder_fallback_url = (maas_cinder_scheme | default(maas_scheme)) + '://' + maas_external_hostname + ':8776/' %}
type              : remote.http
label             : "{{ check_name }}"
period            : "{{ maas_check_period_override[label] | default(maas_check_period) }}"
timeout           : "{{ maas_check_timeout_override[label] | default(maas_check_timeout) }}"
disabled          : "{{ (inventory_hostname != groups['cinder_api'][0] or check_name | regex_search(maas_excluded_checks_regex)) | ternary('true', 'false') }}"
target_resolver   : "IPv4"
target_hostname   : "{{ cinder_api_ip | default(maas_external_ip_address) }}"
details           :
    url           : "{{ cinder_api_url | default(cinder_fallback_url) }}"
monitoring_zones_poll:
{% for zone in maas_monitoring_zones %}
  - {{ zone }}
{% endfor %}
{{ get_metadata(label).strip() }}
{# Add extra metadata options with two leading white spaces #}
alarms            :
    lb_api_alarm_cinder     :
        label               : lb_api_alarm_cinder
        notification_plan_id: "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled            : {{ ('lb_api_alarm_cinder' | regex_search(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria            : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric['code'] != '200' && metric['code'] != '300') {
                return new AlarmStatus(CRITICAL, 'API unavailable.');
            }
